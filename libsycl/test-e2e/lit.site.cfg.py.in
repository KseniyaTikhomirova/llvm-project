@LIT_SITE_CFG_IN_HEADER@

import sys
import platform
import subprocess

import site

site.addsitedir("@CMAKE_CURRENT_SOURCE_DIR@")

config.sycl_compiler = lit_config.params.get("sycl_compiler", "@LIBSYCL_CXX_COMPILER@")
config.sycl_root_dir= os.path.dirname(os.path.dirname(config.sycl_compiler))
config.sycl_bin_dir = os.path.join(config.sycl_root_dir, 'bin')

def get_sycl_tool_path(name):
    try:
        return subprocess.check_output([config.sycl_compiler, "-print-prog-name=" + name], text=True)
    except subprocess.CalledProcessError:
        return os.path.join(config.sycl_bin_dir, name)

config.llvm_main_include_dir = "@LLVM_MAIN_INCLUDE_DIR@"
config.llvm_tools_dir = os.path.dirname(get_sycl_tool_path("llvm-config"))
config.lit_tools_dir = os.path.dirname("@TEST_SUITE_LIT@")
config.sycl_tools_dir = config.llvm_tools_dir
config.sycl_include = os.path.join(config.dpcpp_root_dir, 'include')
config.sycl_obj_root = "@CMAKE_CURRENT_BINARY_DIR@"
config.sycl_libs_dir =  os.path.join(config.sycl_root_dir, ('bin' if platform.system() == "Windows" else 'lib'))

config.opencl_libs_dir = (os.path.dirname("@OpenCL_LIBRARY@") if "@OpenCL_LIBRARY@" else "")
config.opencl_include_dir = os.path.join(config.sycl_include, 'sycl')
config.level_zero_libs_dir = "@LEVEL_ZERO_LIBS_DIR@"
config.level_zero_include = "@LEVEL_ZERO_INCLUDE@"
config.cuda_libs_dir = "@CUDA_LIBS_DIR@"
config.cuda_include = "@CUDA_INCLUDE@"
config.hip_libs_dir = "@HIP_LIBS_DIR@"
config.hip_include = "@HIP_INCLUDE@"

config.sycl_threads_lib = '@SYCL_THREADS_LIB@'
config.extra_environment = lit_config.params.get("extra_environment", "@LIT_EXTRA_ENVIRONMENT@")
config.extra_system_environment = lit_config.params.get("extra_system_environment", "@LIT_EXTRA_SYSTEM_ENVIRONMENT@")
config.cxx_flags = lit_config.params.get("cxx_flags", "@LIBSYCL_E2E_CLANG_CXX_FLAGS@")
config.c_flags = "@CMAKE_C_FLAGS@"
config.extra_include = "@CMAKE_CURRENT_SOURCE_DIR@/include"

import lit.llvm
lit.llvm.initialize(lit_config, config)

lit_config.load_config(config, "@CMAKE_CURRENT_SOURCE_DIR@/lit.cfg.py")

from format import SYCLEndToEndTest
config.test_format = SYCLEndToEndTest()